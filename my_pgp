#!/usr/bin/env python3

from Parser import *

from AES import Aes
from XOR import Xor
from RSA.RSA import Rsa
from PGP_XOR import PgpXor
from PGP_AES import PgpAes

def GetHelpCaption():
    return """USAGE
    ./my_pgp CRYPTO_SYSTEM MODE [OPTIONS] [key]

DESCRIPTION

The MESSAGE is read from standard input
  CRYPTO_SYSTEM
    "xor"       computation using XOR algorithm
    "aes"       computation using 128-bit AES algorithm
    "rsa"       computation using RSA algorithm
    "pgp-xor"   computation using both RSA and XOR algorithm
    "pgp-aes"   computation using both RSA and 128-bit AES algorithm

  MODE
    -c          MESSAGE is clear and we want to cipher it
    -d          MESSAGE is ciphered and we want to decipher it
    -g P Q      for RSA only: Don't read a MESSAGE, but instead generate a public and private key pair from the prime number P and Q

  OPTIONS
    -b          for XOR, AES and PGP, only works on one block. The MESSAGE and the symmetric key must be the same size

  key Key used to cipher/decipher MESSAGE (incompatible with -g MODE)"""

crypto_systems = {
    "xor": Xor,
    "aes": Aes,
    "rsa": Rsa,
    "pgp-xor": PgpXor,
    "pgp-aes": PgpAes
}

def main():
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        print(GetHelpCaption())
        return 0

    parser = Parser(sys.argv)
    if parser.mode == Mode.GENERATE:
        rsa = Rsa(bytes(0))
        rsa.setGenValue(parser.pValue, parser.qValue)
        rsa.generateKeys()
        rsa.displayKeys()
        return
    system = crypto_systems[parser.system](parser.key).getMode(parser.mode)(parser.message)
    print(system)

if __name__ == "__main__":
    main()
